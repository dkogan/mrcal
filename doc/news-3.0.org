#+TITLE: mrcal 3.0 release notes
#+OPTIONS: toc:nil

* New in mrcal 3.0

cross-reprojection

mrcal.drt_ref_refperturbed__dbpacked()
mrcal.compose_rt_tinyrt0_gradientrt0()
mrcal.compose_rt_tinyrt1_gradientrt1
compose_r_tinyr1_gradientr1

75893eea: Added initialy EARLY version of mrcal-show-stereo-pair-diff (this
needs to be tested, documented)

120f654e Fixed incorrect opencv8 intrinsics seeding

mrcal-stereo --single-buffered

poseutils: more careful handling of rotations near singularities

Renamed "residuals" -> "measurements" to clarify the nomenclature
  - residuals_point() -> measurements_point()
  - residuals_board() -> measurements_board()
  - show_residuals_....() take an "x" argument; the old "residuals" argument is
    still accepted

analyses/validate-uncertainty.py script to check the uncertainty and
cross-validation logic

faster uncertainty computation:
  cecab50a CHOLMOD_factorization.solve_xt_JtJ_bt() can solve other problems
  9393ef79 Much faster uncertainty computation

2024-10-31 Added traverse_sensor_links() in C and Python and the min-heap
  added heap.h
  added mrcal_traverse_sensor_links()
  added mrcal.traverse_sensor_links()

2024-11-06 Added C procrustes fit implementations
2024-11-06 Added C mrcal_R_aligned_to_vector()

2024-11-07 Added simple math operation functions to the C API

2024-12-05 Added simple poseutils printing to the C API

2024-11-27 bestq uncertainty method
  - works
  - needs documentation
  - MUCH slower than the mean-pcam, since it solves the linear problem (Nframes
    or Ncameras_extrinsics) more times than mean-pcam

2024-12-06 compose_r(), compose_rt(), compose_Rt() has new args:
inverted0,inverted1

2025-01-15 mrcal.sorted_eig() broadcasts properly

2025-02-26 mrcal_image_uint8_load(a 16-bit image) applies stretch equalization

mrcal-cull-corners has --cull-rad-off-center-board

Added mrcal.cameramodel.optimization_inputs_reset()

2025-08
Added analyses/mrcal-convert-lensmodel-from-kalibr-fov

<2025-07-04 Fri> compute_chessboard_corners() has image_path_prefix and
image_directory To provide more options for interpreting paths in corners.vnl

<2025-08-24 Sun> Added mrcal_cameramodel_converter is a "converter" function
that can be used with "O&" conversions in PyArg_ParseTupleAndKeywords() calls.
Can interpret either path strings or mrcal.cameramodel objects as
mrcal_cameramodel_t structures. This adds a dependency on
  - nm           (binutils package)
  - llvm-objcopy ("llvm" package)
  Probably I just broke cross-building since I'll probably need a special nm for
  that

<2025-08-24 Sun> added mrcal_image_void_t

<2025-09-20 Sat>
  - extrinsics_rt_fromref -> rt_cam_ref
  - extrinsics_Rt_fromref -> Rt_cam_ref
  - extrinsics_rt_toref   -> rt_ref_cam
  - extrinsics_Rt_toref   -> Rt_ref_cam
  
  - frames_rt_fromref     -> rt_frame_ref
  - frames_Rt_fromref     -> Rt_frame_ref
  - frames_rt_toref       -> rt_ref_frame
  - frames_Rt_toref       -> Rt_ref_frame
  
  This applies to the mrcal.cameramodel() constructor arguments and accessor
  functions. And to the mrcal.optimize() and mrcal.optimizer_callback() calls and
  to the contents of the optimization_inputs dict and the pywrap stuff.
  
  Compatibility logic is in place, so old code and data should just work

<2025-09-25 Thu>
  .cameramodel file extrinsics field is called "rt_cam_ref"
  Instead of "extrinsics". Old files can be read. Library writes both versions, so
  models written by new tools can still be read by old mrcal.






* Migration notes 2.4 -> 3.0

2024-12-06 compose_r(), compose_rt(), compose_Rt() have new args:
  inverted0,inverted1 BREAKING C ABI,API change: mrcal_compose_..._full() take
  the two new arguments. And mrcal_compose_rt_full() returns dt01/dr1 and
  dt01/dt0. The mrcal_compose_r(), mrcal_compose_rt() macros and the Python
  functions maintain the same interface

* todo
- Old tools complain about new keywords:

  #+begin_example
mrcal-show-geometry --show-points /tmp/models-noisesample0-camera0.cameramodel
Traceback (most recent call last):
  File "/usr/bin/mrcal-show-geometry", line 186, in <module>
    plot = mrcal.show_geometry(models,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/mrcal/visualization.py", line 446, in show_geometry
    points = get_points_to_plot()
             ^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3/dist-packages/mrcal/visualization.py", line 416, in get_points_to_plot
    mrcal.corresponding_icam_extrinsics(icam_intrinsics,
TypeError: 'do_apply_regularization_unity_cam01' is an invalid keyword argument for mrcal.corresponding_icam_extrinsics()
  #+end_example

- add notes about the triangulated-points merge

- new observed_pixel_uncertainty
  - apply sqrt() factor. Documented in 68789474. git grep -n
    observed_pixel_uncertainty ..
  - Does too little data give smaller residuals? It should. Is this reflected in
    the sqrt() factor?

- mrcal.cameramodel.extrinsics_rt_fromref (and friends): make aliases. I want
  mrcal.cameramodel.rt_cam_ref()

** triangulated features merge
*** =git grep -n Noutliers= Noutliers has change meaning: it's now =Nmeasurements_outliers=

   #+begin_src diff
   diff --git a/doc/c-api.org b/doc/c-api.org
   index 7d3c8939..2ae7d9d5 100644
   --- a/doc/c-api.org
   +++ b/doc/c-api.org
        /* The RMS error of the optimized fit at the optimum. Generally the residual */
        /* vector x contains error values for each element of q, so N observed pixels */
        /* produce 2N measurements: len(x) = 2*N. And the RMS error is */
        /*   sqrt( norm2(x) / N ) */
        double rms_reproj_error__pixels;

   -    /* How many pixel observations were thrown out as outliers. Each pixel */
   -    /* observation produces two measurements. Note that this INCLUDES any */
   -    /* outliers that were passed-in at the start */
   +    /* How many measurements were thrown out as outliers. Each pixel */
   +    /* observation of a chessboard point produces two measurements (x,y). */
   +    /* Note: this INCLUDES any outliers that were passed-in at the start */
        int Noutliers;
    } mrcal_stats_t;


   --- a/mrcal-calibrate-cameras
   +++ b/mrcal-calibrate-cameras
   @@ -745,13 +745,13 @@ Npoints_chessboard = args.object_width_n*args.object_height_n*Nobservations
    residuals = \
        stats['x'][:Npoints_chessboard*2]. \
        reshape(Nobservations, args.object_height_n, args.object_width_n, 2)
    worst_point_err = np.sqrt(np.max(nps.norm2( nps.clump(residuals, n=3) )))
    report += f"Worst residual (by measurement): {worst_point_err:.01f} pixels\n"
    if not args.skip_outlier_rejection:
   -    report += "Noutliers: {} out of {} total points: {:.01f}% of the data\n". \
   +    report += "Noutliers: {} out of {} total measurements: {:.01f}% of the data\n". \
            format(stats['Noutliers'],
                   args.object_height_n*args.object_width_n*len(observations),
                   100.0 * stats['Noutliers'] / (args.object_height_n*args.object_width_n*len(observations)))
    if calobject_warp is not None:
        report += f"calobject_warp = {calobject_warp}\n"
 
   #+end_src

*** divergent-rays-are outlier logic is weird
I declare and outlier on the first pass. That pass is for getting the threshold

** patches deferred for next release

#+begin_src diff
diff --git a/mrcal-show-projection-diff b/mrcal-show-projection-diff
index 572d701..6cb48dc 100755
--- a/mrcal-show-projection-diff
+++ b/mrcal-show-projection-diff
@@ -503,3 +503,7 @@ if not args.intrinsics_only and args.radius != 0 and \
 
 if args.hardcopy is None:
     plot.wait()
+
+
+# should --unset key be the default? And for the uncertainty plot?
+
diff --git a/mrcal-show-residuals-board-observation b/mrcal-show-residuals-board-observation
index 76ce4db..b8c17eb 100755
--- a/mrcal-show-residuals-board-observation
+++ b/mrcal-show-residuals-board-observation
@@ -365,3 +365,8 @@ The optimization inputs are available in the optimization_inputs dict
 for i in range(Nplots):
     os.waitpid(pids[i], 0)
 sys.exit()
+
+
+
+
+### add auto-vector-scale
#+end_src

** _propagate_calibration_uncertainty() needs to be exported in the API
** I should check the camera extrinsics uncertainty
If the camera geometry is very uncertain, the calibration isn't successful; even
if the variance in the other state variables compensates for these perfectly.
The _propagate_calibration_uncertainty() function can easily do this. I should
rename it. And I should expose it as part of the API. This code works to detect
uncertain extrinsics for a camera pair:

#+begin_src python

model_filename = sys.argv[1]
m = mrcal.cameramodel(model_filename)
optimization_inputs = m.optimization_inputs()

istate_extrinsics0 = mrcal.state_index_extrinsics(0, **optimization_inputs)
Nstate_extrinsics  = mrcal.num_states_extrinsics(    **optimization_inputs)

Nstate = mrcal.num_states( **optimization_inputs)

if Nstate_extrinsics != 6:
    raise Exception(f"Unexpected {Nstate_extrinsics=}")

dF_db = np.zeros((Nstate_extrinsics, Nstate), dtype=float)
dF_db[:,istate_extrinsics0:istate_extrinsics0+Nstate_extrinsics] = \
    np.eye(Nstate_extrinsics)

Var_rt_cam_ref = \
    mrcal.model_analysis._propagate_calibration_uncertainty('covariance',
                                                            dF_db = dF_db,
                                                            observed_pixel_uncertainty = 1.,
                                                            optimization_inputs = optimization_inputs)

print(f"stdev(rt_cam_ref) = {np.sqrt(np.diag(Var_rt_cam_ref))}")

#+end_src

** uncertainty regression
The triangulated-features merge caused the uncertainty reporting to be a bit
different for some reason. I need to chase it down to see what happened. I'm
looking at

~/projects/mrcal.old/out0.cameramodel

This command is returning slightly different results before/after the merge:

~/projects/mrcal.old/mrcal-show-projection-uncertainty out0.cameramodel --cbmax 30

** uncertainty strongly affected by regularization weight
Computing the uncertainty of the results of stationary-calibration.py can
produce wildly different output if I tweak the regularization weight

** regularization scaling
I should aim for specific number of pixels instead of for some ratio. This will
probably break loading optimization_inputs from model files: they'd need
reoptimization

** point range normalization
I removed it here: 0e727189. Do I want it back in some form? I do still require
point_min_range and point_max_range. Do I really need these?

** XyJax loaded in too many doc pages
I need it everywhere I use \xymatrix (currently uncertainty.org only). So that's
the only place I should use it. Loading it needlessly is slow

** mrcal-convert-lensmodel
This needs to support points:
- search for indices_point_camintrinsics_camextrinsics
- solving without --sampled fails with points: no logic to do point culling

** mrcal-cull-corners should be able to cull board edges
Need new option like =--cull-board-rowscols L,T,R,B=

Can hack it on the commandline:

#+begin_src sh
R=1; < $C vnl-filter --sub 'ii() { if(filename != prev(filename)) { i=0; return i; } return ++i; }' -p .,'i=ii()' | vnl-filter -p .,\!i,'i=int(i/14)',j='i % 14' | vnl-filter -p filename,x,y,level="(i<$R || i>=14-$R || j<$R || j>=14-$R) ? \"-\" : level" > /tmp/corners-board-edge-cut$R.vnl
#+end_src

** mrcal-stereo should have an anti-aliasing filter
When I downsample. Just before =mrcal.transform_image()= it should

#+begin_src python
for i in range(len(images)):
    images[i] = cv2.GaussianBlur(images[i],
                                 ksize=(0,0), # auto-select
                                 # sigmaX = 2 ^ -pixels_per_deg,
                                 sigmaX = 2 )
#+end_src

** I should support more lens models
Being compatible with at least ROS would be nice. Their models are:

- =plumb_bob=: This is =LENSMODEL_OPENCV5=
- =rational_polynomial=: This is =LENSMODEL_OPENCV8=
- =equidistant=: mrcal does not support this today. It should. This is
  [[https://docs.opencv.org/3.4/db/d58/group__calib3d__fisheye.html][cv::fisheye]]

** _mrcal_drt_ref_refperturbed__dbpacked() currently is hardcoded to use the Jfpcw formulation
Give it an argument to select the formulation. And rename the function. Or
something
** other stuff
- "pydoc3 mrcal" should show everything. It doesn't. "compose_rt" isn't there,
  for instance

- mrcal-stereo: during the rectification (or maybe disparity search) stage C-c
  doesn't work.

** Expose _options_heatmap_with_contours()
** mrcal.stereo_range() does uint16 based on qrect0 is None. It should look at the type
Currently a full-image float range image doesn't work right: it casts to uint16,
and we lose accuracy
** Port to mrcal 2.5
commit 317b4b904f1f1fa3c983e48d86104dca50893a6e
Author: Dima Kogan <dima@secretsauce.net>
Date:   Thu Aug 10 14:30:58 2023 -0700

    r_from_R_core() better implementation around th=180deg

 And mrcal-stereo --single-buffered

* release checklist
These are notes to myself containing the steps needed to roll a new release

- docs: make sure all new python functions are described in python.org
- new [[file:versions.org][versions]]
- new [[file:news-2.2.org][news]]
- [[file:~/projects/mrcal/Makefile::PROJECT_NAME := mrcal][Makefile ABI version]]
- package build and upload
- versioned docs:
  - on the server move =docs-latest-release= symlink. This controls what =make publish-docs= writes to
  - on the server populate the =docs-latest-release/external= symlink
  - on the server move =docs-default= symlink. This controls what
    https://mrcal.secretsauce.net sees
- git tag
