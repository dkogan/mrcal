#+title: mrcal - camera calibrations and more!

mrcal is a toolkit that provides improved methods for making and using camera
models (calibration, tracking, mapping, photogrammetry, etc). It was originally
built at NASA/JPL to generate the high-accuracy calibrations demanded by
long-range stereo, so it provides facilities to calibrate cameras, analyze the
accuracy of the result, and to propagate and report uncertainties.

* Why mrcal?
Because all other tools are terrible if you care about accuracy. They make basic
questions like "how much data should I gather for a calibration?" and "how good
is this calibration I just computed?" and "how different are these two models?"
unanswerable. The previous state-of-the-art was good-enough for low-resolution
cameras and long-focal-length lenses and low-range stereo. But today, the
existing tools are often insufficient.

This toolkit allows the user to confidently produce calibrations that are as
good as possible. It provides lots of visualization capabilities to evaluate
various properties of a model solution. And it provides powerful analysis
methods, such as model differencing and quantification of projection and
triangulation uncertainty. To fit the real-world lens behavior mrcal loosens
many assumptions common in other toolkits: the calibration chessboard isn't
assumed to be flat, lenses aren't assumed to follow simple parametric models,
rectified stereo isn't done with a pinhole model, and so on.

mrcal consists of

- a C library for core functionality
- a Python library for higher-level functions
- commandline tools for common tasks

* Documentation index
** Overview, background
*** [[file:tour.org][The tour of mrcal]]
If this is your first exposure to mrcal, start here. This goes over the
high-level capabilities of the toolkit, to give a good sense of what mrcal can
do that's different and better than other tools.

*** [[file:conventions.org][Terminology and conventions]]
These are helpful to go over before reading the documentation

** Details about the internals
*** [[file:formulation.org][Problem formulation]]
At the core of a calibration routine is an optimization problem. The details are
important to be able to interpret the results

*** [[file:lensmodels.org][Lens models supported by mrcal]]
A projection function can be represented by mrcal in many different ways,
described on this page

*** [[file:splined-models.org][Splined-stereographic lens model]]
This very rich lens model is available for high-fidelity modeling of projection
and quantification of uncertainty.

*** [[file:cameramodels.org][Lens model representation in memory on disk]]
Describes mrcal model access by the mrcal [[file:python-api.org][APIs]] and [[file:commandline-tools.org][commandline-tools]]

*** [[file:differencing.org][Projection differencing]]
mrcal can compute the intrinsics difference between several models. This is
useful to evaluate calibration quality and lens stability and a multitude of
other things.

*** [[File:uncertainty.org][Projection uncertainties]]
To evaluate the quality of a model it is crucial to look at its projection
uncertainty

*** [[file:stereo.org][Dense stereo processing]]
Once we have a calibrated pair of cameras, we can generate a dense depth map

*** [[file:triangulation.org][Triangulation]]
Or we can compute ranges of a discrete set of observations

** Practical guides
*** [[file:how-to-calibrate.org][How to calibrate a camera system]]
The core task of mrcal is calibrating cameras. Practical details are given here

*** [[file:recipes.org][Recipes]]
Making and using camera models raises a number of common issues and situations.
I describe a number of them on this page.

** Toolkit usage
*** [[file:install.org][Installation, build instructions]]
*** [[file:commandline-tools.org][Command-line tools]]
Many common tasks can be accomplished without writing any code

*** [[file:python-api.org][The Python API]]
A Python API is available to go beyond what the pre-made tools can do. The
pre-made tools themselves are written using the Python API, so their sources are
themselves are a good guide

*** [[file:c-api.org][The C API]]
Internally, the Python functions use the mrcal C API. Only core functionality is
available in the C API (the Python API can do some stuff that the C API cannot),
but with time more and more stuff will be transitioned to a C-internal
representation. Today, end-to-end dense stereo processing in C is possible.

** [[file:versions.org][Releases]]
A version history, release notes, and the planned roadmap

* Citing
To cite this work in a publication, use this bibtex stanza:

#+begin_example
@misc{mrcal,
  author = "Dima Kogan",
  title = "mrcal",
  howpublished = "\url{http://mrcal.secretsauce.net}",
}
#+end_example

* Dev communication
For now let's use the [[https://github.com/dkogan/mrcal/issues][github issue tracker]] for bug reporting and for
communication in general. At some point I will probably set up a mailing list as
well.

* Author
Dima Kogan =dima@secretsauce.net=

* License and copyright
These are listed on [[file:copyrights.org][their own page]].
